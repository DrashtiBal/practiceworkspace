package com.Collection.Drashti;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class HashSortValues {
	
	 // function to sort hashmap by values
	private static Map<String, Integer> sortByValue(HashMap<String, Integer> hm) {

		// Create a list from elements of HashMap
		List<Map.Entry<String,Integer>>	list= new LinkedList<Map.Entry<String, Integer>>(hm.entrySet());
		
		// Sort the list
		Collections.sort(list,new Comparator<Map.Entry<String,Integer>>(){

			@Override
			public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {
			
				return (o1.getValue()).compareTo(o2.getValue());
			}
			
		});
		
		// put data from sorted list to hashmap
		HashMap<String,Integer> temp= new LinkedHashMap<String, Integer>();
		for (Map.Entry<String, Integer> entry : list) {
			temp.put(entry.getKey(),entry.getValue());
			
		}
		return temp;
		
	}
		
		public static void main(String[] args) {
			
			HashMap<String, Integer> hm= new HashMap<String,Integer>();
			 hm.put("Math", 98);
		     hm.put("Data Structure", 85);
		     hm.put("Database", 91);
		     hm.put("Java", 95);
		     hm.put("Operating System", 79);
		     hm.put("Networking", 80);
		     Map<String, Integer> hm1 = sortByValue(hm);
		     
		     for (Map.Entry<String,Integer> p :hm1.entrySet()) {
		    	 System.out.println("key=" +p.getKey() + "value="+p.getValue());
				
			}
	}


}
